EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
PracticaRAMRizzoEsUnaRaizJustoENLaHIPO.bin -- emu8086 assembler version: 4.08  
 
[ 13/06/2016  --  08:41:46 p. m. ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       org 0000h
[   2]        :                                       
[   3]    0000: B8 00 00                              mov ax, 0000h
[   4]    0003: 8E D8                                 mov ds, ax
[   5]        :                                       
[   6]        :                                       ;primero leeremos leds hasta que un boton se presione
[   7]        :                                       ; RAM -> 2  ...40
[   8]        :                                       ; ROM -> 7  ...E0
[   9]        :                                       ; SWS -> 1  ...20
[  10]        :                                       ; LEDS -> 0 ...00
[  11]        :                                       ; BTN -> 3  ...60
[  12]        :                                       
[  13]    0005: BB 00 40                              mov bx, 0x4000          ; preparamos para RAM
[  14]    0008: B9 00 00                              mov cx, 0x0000           ; inicializamos cx
[  15]    000B: BA 00 00                              mov dx, 0x0000         ; inicializamos dx
[  16]        :                                       
[  17]    000E:                                       cont:                   ; boot
[  18]    000E: 88 16 00 00                           mov [0x0000], dl
[  19]    0012: FE C2                                 inc dl
[  20]    0014: E8 3C 00                              call delay
[  21]    0017: 80 FA FF                              cmp dl, 0xFF
[  22]    001A: 7F F2                                 jg cont
[  23]        :                                       
[  24]        :                                       ; checar si ya presiono el btn de carga
[  25]    001C:                                       presBtn:
[  26]    001C: A0 00 60                              mov al, [0x6000]
[  27]    001F: 24 01                                 and al, 0x01
[  28]    0021: 3C 00                                 cmp al, 0x00
[  29]    0023: 74 F7                                 jz presBtn
[  30]    0025:                                       sltBtn:
[  31]    0025: 8A 26 00 20                           mov ah, [0x2000]    ; cargamos el dato a un registro
[  32]    0029: A0 00 60                              mov al, [0x6000]    ; vemos si ya solto el boton, si no se hace un loop
[  33]    002C: 24 01                                 and al, 0x01
[  34]    002E: 3C 01                                 cmp al, 0x01
[  35]    0030: 74 F3                                 jz sltBtn
[  36]    0032: 88 1E 00 00                           mov [0x0000], bl
[  37]    0036: 88 27                                 mov [bx], ah            ; guardamos el dato valido en RAM
[  38]    0038: FE C3                                 inc bl                  ; incrementamos donde guardaremos en RAM
[  39]    003A: 80 FB 0A                              cmp bl, 0x0A            ; si ya se leyeron 10 nums, salir del ciclo de lectura
[  40]    003D: 7C DD                                 jl presBtn
[  41]        :                                       
[  42]    003F:                                       rst:                    ; siempre se ejecuta despues de lectura
[  43]        :                                       
[  44]    003F: BB 00 40                              mov bx, 0x4000
[  45]        :                                       
[  46]    0042:                                       pntLeds:                ; imprime en leds
[  47]    0042: 8A 07                                 mov al, [bx]
[  48]    0044: A2 00 00                              mov [0x0000], al
[  49]    0047: E8 09 00                              call delay          ; se hace un delay
[  50]    004A: FE C3                                 inc bl
[  51]    004C: 80 FB 0A                              cmp bl, 0x0A
[  52]    004F: 74 EE                                 jz rst              ; volvemos a rst
[  53]    0051: EB EF                                 jmp pntLeds
[  54]        :                                       
[  55]        :                                       
[  56]    0053:                                       proc delay              ; un pequeno delay
[  57]    0053: B9 FF 00                              mov cx, 0x00FF
[  58]    0056:                                       tag:
[  59]    0056: 49                                    dec cx
[  60]    0057: 83 F9 00                              cmp cx, 0x0000
[  61]    005A: 7F FA                                 jg tag
[  62]    005C: C3                                    ret
[  63]        :                                       
[  64]        :                                       
[  65]        :                                       
[  66]        :                                       
[  67]        :                                       
[  68]        :                                       
[  69]        :                                       
[  70]        :                                       
[  71]        :                                       
[  72]        :                                       
 
===================================================================================================
 




===================================================================================================
